// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Text.RegularExpressions;

using MCS.UTILITIES.EXTENSIONS;
using MCS.FOUNDATIONS;
using MCS.CONSTANTS;
using MCS.COSTUMING;

namespace MCS.CORESERVICES
{
	internal class BoneUtility
	{

        //white space then digit not preceeded by a whitespace (clean will convert these matched to "")
        //private static Regex _boneNameStripper = new Regex(@"(\s(?<=\s)\d+)?",RegexOptions.Compiled);
        private static Regex _boneNameStripper = new Regex(@"(\s(?<=\s)\d+)?");
        private static string replacement = "";

        //optimizes gc so we don't need to use so many regex replacements and string creation
        private static Dictionary<string, string> _boneRemapCache = new Dictionary<string, string>();

		/// <summary>
		/// Remaps the bone structure from a given Transform, returning a new array of bones. 
		/// </summary>
		/// <returns>An array of bone Transforms</returns>
		/// <param name="reference_geometry_bones">Reference geometry bones.</param>
		/// <param name="destination_bones">Destination bones.</param>
		public static Transform[] RemapBones (Transform[] reference_geometry_bones, Transform reference_root_bone, BoneUtility.BoneMap destination_bones, Transform destination_root_bone)
		{
            for(int i = 0; i < reference_geometry_bones.Length; i++) {
                BoneUtility.cleanAllBoneNames(reference_geometry_bones[i]);
			}
			
			var new_bones = new Transform[reference_geometry_bones.Length];
			for (var index = 0; index < reference_geometry_bones.Length; index++) {
				new_bones[index] = DictionaryExtensions.Find (destination_bones, reference_geometry_bones[index].name);
			}
			
			return new_bones;
		}



		/// <summary>
		/// Cleans up all bone names recursively in children of the given Transform, using the regular expression provided.
		/// </summary>
		/// <param name="bone">Bone.</param>
		/// <param name="rgx">The regular expression to match or prelace</param>
		public static void cleanAllBoneNames (Transform bone)
		{
            //do nothing, there is no space
            int pos = bone.name.IndexOf(" ");
            if(pos < 0)
            {
                return;
            }

            string replacementName;

            if(_boneRemapCache.TryGetValue(bone.name,out replacementName)){
                bone.name = replacementName;
                return;
            }

			replacementName = _boneNameStripper.Replace (bone.name, replacement);
            _boneRemapCache[bone.name] = replacementName;
            bone.name = replacementName;
		}



		/// <summary>
		/// Return a string array of all bone names in a given boneMap
		/// </summary>
		/// <returns>The array of bone names.</returns>
		/// <param name="bone_map">Bone map.</param>
		public static string[] getAllBonesNames (BoneUtility.BoneMap bone_map)
		{
			string[] result = new string[bone_map.Keys.Count];
			bone_map.Keys.CopyTo (result, 0);
			
			return result;
		}



		/// <summary>
		/// The BoneMap class of type Dictionary<string, Transform>
		/// </summary>
		public class BoneMap : Dictionary<string, Transform>
		{
			/// <summary>
			/// Initializes a new instance of the <see cref="MCS.CORESERVICES.BoneUtility+BoneMap"/> class given a Transform
			/// </summary>
			/// <param name="transform">Transform.</param>
			public BoneMap (Transform transform)
			{
				Traverse (transform);
			}



			/// <summary>
			/// Internal method to traverse a transform and it's children, looking for bones.
			/// </summary>
			/// <param name="transform">Transform.</param>
			private void Traverse (Transform transform)
			{
                //short circuit if we already have this entry
                if (ContainsKey(transform.name))
                {
                    UnityEngine.Debug.LogWarning("Duplicate bone map found: " + transform.name + ", please report this to customer service");
                    return;
                }
				Add (transform.name, transform);
				// Debug.Log(transform.name+":"+transform.name.Length);
				foreach (Transform child in transform) {
                    //don't traverse if we think this is an "item"
                    GameObject cGO = child.gameObject;
                    if (
                        cGO == null 
                        || cGO.GetComponent<CIattachmentPoint>() != null
                        || cGO.GetComponent<CIclothing>() != null
                        || cGO.GetComponent<CoreMeshMetaData>() != null
                    ){
                        continue;
                    }
					Traverse (child);
				}
			}

		}



	}
}
